using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using IKON;
using IKON.STON.Values;
using System.Globalization;
using IKON.Utils;

namespace IKON.STON.Factories
{
	/// <summary>
	/// IKON value factory for IKSTON  numeric values.
	/// </summary>
	public class NumericFactory : IValueFactory
	{
		static ICollection<char> ValidChars = DefineValidChars();

		/// <summary>
		/// Sign for IKON numeric value.
		/// </summary>
		public const char OpeningSign = '=';

		/// <summary>
		/// Number format used for IKSTON numeric values.
		/// </summary>
		public static readonly IFormatProvider NumberFormat = NumberFormatInfo.InvariantInfo;
		/// <summary>
		/// Valid styles for IKSTON numeric values.
		/// </summary>
		public static readonly NumberStyles NumberStlye = NumberStyles.Float;

		/// <summary>
		/// Sign for IKON numeric value.
		/// </summary>
		public char Sign
		{
			get { return OpeningSign; }
		}

		/// <summary>
		/// Parses input for a IKON value.
		/// </summary>
		/// <param name="parser">IKON parser instance.</param>
		/// <returns>IKON value generated by factory.</returns>
		public Value Parse(IKON.Parser parser)
		{
			parser.SkipWhitespaces();
			if (!parser.CanRead)
				throw new EndOfStreamException();

			StringBuilder stringBuilder = new StringBuilder();

			while (parser.CanRead && ValidChars.Contains(parser.PeakReader))
				stringBuilder.Append(parser.ReadChar());

			if (stringBuilder.Length == 0)
				throw new FormatException();

			string numberText = stringBuilder.ToString();

			decimal tempD;
			double tempF;
			long tempI;
			if (!decimal.TryParse(numberText, NumberStlye, NumberFormat, out tempD) &&
				!double.TryParse(numberText, NumberStlye, NumberFormat, out tempF) &&
				long.TryParse(numberText, NumberStlye, NumberFormat, out tempI))
			{
				throw new FormatException();
			}

			return new Numeric(stringBuilder.ToString());
		}

		private static HashSet<char> DefineValidChars()
		{
			HashSet<char> res = new HashSet<char>();

			res.Add('-');
			res.Add('.');
			for (char c = 'a'; c <= 'z'; c++) res.Add(c);
			for (char c = 'A'; c <= 'Z'; c++) res.Add(c);
			for (char c = '0'; c <= '9'; c++) res.Add(c);

			return res;
		}
	}
}
