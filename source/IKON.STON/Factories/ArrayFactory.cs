using System.Collections.Generic;
using Ikon;
using Ikon.Ston.Values;
using Ikon.Utilities;

namespace Ikon.Ston.Factories
{
	/// <summary>
	/// IKON value factory for IKSTON  array.
	/// </summary>
	public class ArrayFactory : IValueFactory
	{
		/// <summary>
		/// Sign for IKON array.
		/// </summary>
		public const char OpeningSign = '[';

		/// <summary>
		/// Closing character for IKSTON array in textual
		/// representation.
		/// </summary>
		public const char ClosingChar = ']';

		/// <summary>
		/// Sign for IKON array.
		/// </summary>
		public char Sign
		{
			get { return OpeningSign; }
		}

		/// <summary>
		/// Parses input for a IKON value.
		/// </summary>
		/// <param name="parser">IKON parser instance.</param>
		/// <returns>IKON value generated by factory.</returns>
		public Value Parse(Ikon.Parser parser)
		{
			if (parser == null)
				throw new System.ArgumentNullException("parser");

			List<Value> values = new List<Value>();

			while (parser.ReadNextNonwhite() != ClosingChar)
			{
				values.Add(parser.ParseNext());
			}
			parser.ReadChar();

			return new Array(values);
		}
	}
}
