using System.Collections.Generic;
using Ikon;
using Ikon.Ston.Values;
using Ikon.Utilities;
using System;

namespace Ikon.Ston.Factories
{
	/// <summary>
	/// IKON value factory for IKSTON  array.
	/// </summary>
	public class ArrayFactory : IValueFactory
	{
		/// <summary>
		/// Sign for IKON array.
		/// </summary>
		public const char OpeningSign = '[';

		/// <summary>
		/// Closing character for IKSTON array in textual
		/// representation.
		/// </summary>
		public const char ClosingChar = ']';

		/// <summary>
		/// Sign for IKON array.
		/// </summary>
		public char Sign
		{
			get { return OpeningSign; }
		}

		/// <summary>
		/// Parses input for a IKON value.
		/// </summary>
		/// <param name="parser">IKON parser instance.</param>
		/// <returns>IKON value generated by factory.</returns>
		public IkonBaseValue Parse(Ikon.Parser parser)
		{
			if (parser == null)
				throw new System.ArgumentNullException("parser");

			List<IkonBaseValue> values = new List<IkonBaseValue>();

			while (parser.Reader.PeekNextNonwhite() != ClosingChar)
			{
				string startPosition = parser.Reader.PositionDescription;
				if (!parser.HasNext())
					throw new FormatException("Characters from " + startPosition + " to " + parser.Reader.PositionDescription + " couldn't be parsed as IKON value");

				values.Add(parser.ParseNext());
			}
			parser.Reader.Read();

			return new ArrayValue(values);
		}
	}
}
