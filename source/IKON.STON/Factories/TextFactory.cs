using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Ikon;
using Ikon.Ston.Values;
using Ikon.Utilities;

namespace Ikon.Ston.Factories
{
	/// <summary>
	/// IKON value factory for IKSTON  textual values.
	/// </summary>
	public class TextFactory : IValueFactory
	{
		/// <summary>
		/// Sign for IKON textual value.
		/// </summary>
		public const char OpeningSign = '"';

		/// <summary>
		/// Closing character for IKSTON textual value in textual
		/// representation.
		/// </summary>
		public const char ClosingChar = '"';

		const char EscapeChar = '\\';
		
		static Dictionary<string, char> EscapeCodes = DefineEscapeCodes();

		/// <summary>
		/// Sign for IKON textual value.
		/// </summary>
		public char Sign
		{
			get { return OpeningSign; }
		}

		/// <summary>
		/// Parses input for a IKON value.
		/// </summary>
		/// <param name="parser">IKON parser instance.</param>
		/// <returns>IKON value generated by factory.</returns>
		public Value Parse(Ikon.Parser parser)
		{
			if (parser == null)
				throw new System.ArgumentNullException("parser");

			StringBuilder stringBuilder = new StringBuilder();
			bool escaping = false;
			char nextChar = '\0';

			while (parser.Reader.HasNext)
			{
				nextChar = parser.Reader.Read();

				if (nextChar == ClosingChar && !escaping)
					break;
				else if (escaping)
				{
					string escapeSequence = EscapeChar.ToString() + nextChar.ToString();
					if (!EscapeCodes.ContainsKey(escapeSequence)) throw new FormatException("Unsupported string escape sequence: " + escapeSequence);

					stringBuilder.Append(EscapeCodes[escapeSequence]);
					escaping = false;
				}
				else if (nextChar == EscapeChar)
					escaping = true;
				else
					stringBuilder.Append(nextChar);
			}

			if (!parser.Reader.HasNext && nextChar != ClosingChar) 
				throw new EndOfStreamException();

			return new Text(stringBuilder.ToString());
		}

		private static Dictionary<string, char> DefineEscapeCodes()
		{
			Dictionary<string, char> res = new Dictionary<string, char>();

			res.Add(@"\\", '\\');
			res.Add(@"\""", '"');
			res.Add(@"\n", '\n');
			res.Add(@"\r", '\r');
			res.Add(@"\t", '\t');

			return res;
		}
	}
}
