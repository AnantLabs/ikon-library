using Ikon;
using Ikon.Ston.Values;
using Ikon.Utilities;

namespace Ikon.Ston.Factories
{
	/// <summary>
	/// IKON value factory for composite IKSTON values.
	/// </summary>
	public class ObjectFactory : IValueFactory
	{
		/// <summary>
		/// Sign for IKON composite value.
		/// </summary>
		public const char OpeningSign = '{';

		/// <summary>
		/// Closing character for IKSTON composite value in textual
		/// representation.
		/// </summary>
		public const char ClosingChar = '}';

		/// <summary>
		/// Sign for IKON composite value.
		/// </summary>
		public char Sign
		{
			get { return OpeningSign; }
		}

		/// <summary>
		/// Parses input for a IKON value.
		/// </summary>
		/// <param name="parser">IKON parser instance.</param>
		/// <returns>IKON value generated by factory.</returns>
		public Value Parse(Ikon.Parser parser)
		{
			if (parser == null)
				throw new System.ArgumentNullException("parser");

			Object res = new Object(parser.ReadIdentifier());

			while (parser.ReadNextNonwhite() != ClosingChar)
			{
				res[parser.ReadIdentifier()] = parser.ParseNext();
			}
			parser.ReadChar();

			return res;
		}
	}
}
